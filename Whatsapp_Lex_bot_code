import os
import glob
import time
import json
from botocore.vendored import requests
import datetime
import hashlib
import hmac
import sys

# ************* REQUEST VALUES *************
method = 'POST'
service = 'lex'
host = 'runtime.lex.eu-west-1.amazonaws.com'
region = 'eu-west-1'
endpoint = 'https://runtime.lex.eu-west-1.amazonaws.com/'
#request_text = 'i want to book a hotel' # request text
access_key = '<AWS LEX ACCESS KEY>'
secret_key = '<AWS LEX SECRET KEY>'
jwt = '<SMOOCH JWT KEY>'

# Key derivation functions. See:
# http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-python
def sign(key, msg):
    return hmac.new(key, msg.encode("utf-8"), hashlib.sha256).digest()

def getSignatureKey(key, dateStamp, regionName, serviceName):
    kDate = sign(("AWS4" + key).encode("utf-8"), dateStamp)
    kRegion = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, "aws4_request")
    return kSigning

def lambda_handler(event, context): #RECEIVE WHATSAPP WEBHOOK FROM SMOOCH
    print("Received event from  Smooch : " + json.dumps(event))
    data = event #pass the JSON formatted objects into the variable called dict
    #smooch_data = data['messages'] #body contains a string formatted JSON object with the details we need. Here we load it to a variable 
    for item in data['messages']:
        message=item['text'] #find the array within 'messages' called 'text'        
        print("This is the message from whatsapp:", message)

######SEND MESSAGE TO LEX BOT#######
    parameters = '{"inputText": "' + message + '"}' #message text from whatsapp to send to  lex
    request_parameters = parameters.encode('utf-8')
    bot_name = 'TriageBot'  # bot name
    bot_alias = 'TBOT' # bot's alias
    user_id = '369625088893' # some user-id - not used for authenticatio
    post_action = 'text'
    content_type = 'application/json'
    # Create a date for headers and the credential string
    t = datetime.datetime.utcnow()
    amz_date = t.strftime('%Y%m%dT%H%M%SZ')#'20170714T010101Z'
    date_stamp = t.strftime('%Y%m%d') # Date w/o time, used in credential scope  '20170714'
    
    # ************* TASK 1: CREATE A CANONICAL REQUEST *************
# http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html

# Step 1 is to define the verb (GET, POST, etc.)--already done.

# Step 2: Create canonical URI--the part of the URI from domain to query
# string (use '/' if no path)
    #canonical_uri = '/bot/' + 'BookTrip' + '/alias/' + 'prod' + '/user/' + '22335566' + '/' + 'text'
    canonical_uri = '/bot/' + bot_name + '/alias/' + bot_alias + '/user/' + user_id + '/' + post_action

## Step 3: Create the canonical query string. In this example, request
# parameters are passed in the body of the request and the query string
# is blank.
    canonical_querystring = ''

# Step 4: Create the canonical headers. Header names must be trimmed
# and lowercase, and sorted in code point order from low to high.
# Note that there is a trailing \n.
    # Step 6: Create payload hash. In this example, the payload (body of
# the request) contains the request parameters.
    payload_hash = hashlib.sha256(request_parameters).hexdigest()
    canonical_headers = 'content-type:' + content_type + '\n' + 'host:' + host + '\n' + 'x-amz-content-sha256:' + payload_hash + '\n' + 'x-amz-date:' + amz_date + '\n'

# Step 5: Create the list of signed headers. This lists the headers
# in the canonical_headers list, delimited with ";" and in alpha order.
# Note: The request can include any headers; canonical_headers and
# signed_headers include those that you want to be included in the
# hash of the request. "Host" and "x-amz-date" are always required.
# For Lex, content-type and x-amz-target are also required.
    
    signed_headers = 'content-type;host;x-amz-content-sha256;x-amz-date'


# Step 7: Combine elements to create create canonical request
    canonical_request = method + '\n' + canonical_uri + '\n' + canonical_querystring + '\n' + canonical_headers + '\n' + signed_headers + '\n' + payload_hash
    encoded_cr = canonical_request.encode('utf-8')

# ************* TASK 2: CREATE THE STRING TO SIGN*************
# Match the algorithm to the hashing algorithm you use, either SHA-1 or
    # SHA-256 (recommended)
    algorithm = 'AWS4-HMAC-SHA256'
    credential_scope = date_stamp + '/' + region + '/' + service + '/' + 'aws4_request'
    string_to_sign = algorithm + '\n' +  amz_date + '\n' +  credential_scope + '\n' +  hashlib.sha256(encoded_cr).hexdigest()
# ************* TASK 3: CALCULATE THE SIGNATURE *************
# Create the signing key using the function defined above.
    signing_key = getSignatureKey(secret_key, date_stamp, region, service)

# Sign the string_to_sign using the signing_key
    signature = hmac.new(signing_key, string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()
    #signature = hmac.new(b'{signing_key}', string_to_sign.encode('utf-8'), hashlib.sha256).hexdigest()
# ************* TASK 4: ADD SIGNING INFORMATION TO THE REQUEST *************
# Put the signature information in a header named Authorization.
    authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + credential_scope + ', ' +  'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + signature
    headers = {'Content-Type':content_type,
               'X-Amz-Date':amz_date,
               'X-Amz-content-Sha256' :payload_hash,
               'Authorization':authorization_header}
    
    
    
    # ************* SEND THE REQUEST  TO LEX *************
    #print ('\nBEGIN REQUEST++++++++++++++++++++++++++++++++++++')
    #print ('Request URL = ' + endpoint)
    #print('\n' + authorization_header)
    #print('\nX-Amz-content-Sha256 header is' + payload_hash)
    
    r = requests.post(endpoint + canonical_uri, data=request_parameters, headers=headers)
    data = r.json()
    print('the json from lex is: ' + json.dumps(data))
    lex_message = data['message']
    print ('the received lex message is: ' + lex_message)
    
    ######SEND RESPONSE BACK TO WHATSAPP        
    parameters = {
    'type':'text',
    'text':lex_message,
    'role':'appMaker'
    }
    payload = json.dumps(parameters)
    bearer_token = 'Bearer ' + jwt
    header = {
    'Content-Type': 'application/json',
    'Authorization': bearer_token
    }
    url = 'https://api.smooch.io/v1.1/apps/<SMOOCH_APP_ID>/appusers/<SMOOCH_USER_ID>/messages' 
    r = requests.post(url, data=payload, headers=header) #auth token sent as part of header
    
    if  r.status_code != 201:
            data = r.json()
            print("", data)

    else:  #if the object assignment is successful then show the message details
            data = r.json()
            print("", data)
    return {
    'statusCode': 200,
    'body': json.dumps('Hello from Lambda!')
    }
